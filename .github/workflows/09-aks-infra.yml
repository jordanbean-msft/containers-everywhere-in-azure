name: 09-aks-infra

on:
  workflow_dispatch:
    
jobs:
  deploy:    
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: cardinalby/export-env-action@v1
        with:
          envFile: ${{ secrets.ENV_FILE }}   
          expand: true
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }} 
      - name: Deploy AKS cluster
        run: |
          az aks create -n ${{ env.AKS_NAME }} \
              -g ${{ env.RESOURCE_GROUP_NAME }} \
              --network-plugin azure \
              --enable-managed-identity \
              -a ingress-appgw \
              --appgw-name myApplicationGateway \
              --appgw-subnet-cidr "10.2.0.0/16" \
              --generate-ssh-keys \
              --node-count 3
      - name: Azure Kubernetes set context
        uses: Azure/aks-set-context@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          resource-group: ${{ env.RESOURCE_GROUP_NAME }}
          cluster-name: ${{ env.AKS_NAME }}
      - name: Create Kubernetes Namespace
        run: |
          kubectl create namespace ${{ env.AKS_NAMESPACE }}
      - name: Set ACR Kubernetes Secret
        run: |  
          kubectl create secret docker-registry acr-pull-secret --namespace ${{ env.AKS_NAMESPACE }} \
            --docker-server=${{ env.ACR_LOGIN_SERVER }} \
            --docker-username="${{ env.ACR_NAME }}" \
            --docker-password=${{ secrets.ACR_PASSWORD }}
      - name: Get AKS Public IP Address
        id: aksPip
        run: |
          aksPip=$(az network public-ip show -n ${{ env.AKS_PIP_NAME }} -g ${{ env.RESOURCE_GROUP_NAME }} --query "ipAddress" -o tsv)

          echo "::set-output aksPip=aksPip::$aksPip"
      - name: Install NGINX ingress controller with static IP
        run: |
          helm install ingress-nginx ingress-nginx/ingress-nginx \
            --namespace ${{ env.AKS_NAMESPACE }} \
            --set controller.replicaCount=1 \
            --set controller.nodeSelector."beta\.kubernetes\.io/os"=linux \
            --set defaultBackend.nodeSelector."beta\.kubernetes\.io/os"=linux \
            --set controller.service.externalTrafficPolicy=Local \
            --set controller.service.loadBalancerIP="${{ steps.aksPip.outputs.aksPip }}" 